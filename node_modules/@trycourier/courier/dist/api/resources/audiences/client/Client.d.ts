/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Audiences {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Audiences {
    protected readonly _options: Audiences.Options;
    constructor(_options?: Audiences.Options);
    /**
     * Returns the specified audience by id.
     *
     * @param {string} audienceId - A unique identifier representing the audience_id
     * @param {Audiences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.audiences.get("string")
     */
    get(audienceId: string, requestOptions?: Audiences.RequestOptions): Promise<Courier.Audience>;
    /**
     * Creates or updates audience.
     *
     * @param {string} audienceId - A unique identifier representing the audience id
     * @param {Courier.AudienceUpdateParams} request
     * @param {Audiences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.audiences.update("string", {
     *         name: "string",
     *         description: "string",
     *         filter: {
     *             value: "string",
     *             path: "string",
     *             operator: Courier.ComparisonOperator.EndsWith
     *         }
     *     })
     */
    update(audienceId: string, request?: Courier.AudienceUpdateParams, requestOptions?: Audiences.RequestOptions): Promise<Courier.AudienceUpdateResponse>;
    /**
     * Deletes the specified audience.
     *
     * @param {string} audienceId - A unique identifier representing the audience id
     * @param {Audiences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.audiences.delete("string")
     */
    delete(audienceId: string, requestOptions?: Audiences.RequestOptions): Promise<void>;
    /**
     * Get list of members of an audience.
     *
     * @param {string} audienceId - A unique identifier representing the audience id
     * @param {Courier.AudienceMembersListParams} request
     * @param {Audiences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.audiences.listMembers("string", {
     *         cursor: "string"
     *     })
     */
    listMembers(audienceId: string, request?: Courier.AudienceMembersListParams, requestOptions?: Audiences.RequestOptions): Promise<Courier.AudienceMemberListResponse>;
    /**
     * Get the audiences associated with the authorization token.
     *
     * @param {Courier.AudiencesListParams} request
     * @param {Audiences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.audiences.listAudiences({
     *         cursor: "string"
     *     })
     */
    listAudiences(request?: Courier.AudiencesListParams, requestOptions?: Audiences.RequestOptions): Promise<Courier.AudienceListResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
