/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace AuthTokens {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class AuthTokens {
    protected readonly _options: AuthTokens.Options;
    constructor(_options?: AuthTokens.Options);
    /**
     * Returns a new access token.
     *
     * @param {Courier.IssueTokenParams} request
     * @param {AuthTokens.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.authTokens.issueToken({
     *         scope: "string",
     *         expires_in: "string"
     *     })
     */
    issueToken(request: Courier.IssueTokenParams, requestOptions?: AuthTokens.IdempotentRequestOptions): Promise<Courier.IssueTokenResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
