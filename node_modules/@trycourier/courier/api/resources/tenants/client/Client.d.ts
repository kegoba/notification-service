/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Tenants {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Tenants {
    protected readonly _options: Tenants.Options;
    constructor(_options?: Tenants.Options);
    /**
     * @param {string} tenantId - A unique identifier representing the tenant to be returned.
     * @param {Courier.TenantCreateOrReplaceParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.tenants.createOrReplace("string", {
     *         name: "string",
     *         parent_tenant_id: "string",
     *         default_preferences: {
     *             items: [{}]
     *         },
     *         properties: {
     *             "string": {
     *                 "key": "value"
     *             }
     *         },
     *         user_profile: {
     *             "string": {
     *                 "key": "value"
     *             }
     *         },
     *         brand_id: "string"
     *     })
     */
    createOrReplace(tenantId: string, request: Courier.TenantCreateOrReplaceParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.Tenant>;
    /**
     * @param {string} tenantId - A unique identifier representing the tenant to be returned.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.tenants.get("string")
     */
    get(tenantId: string, requestOptions?: Tenants.RequestOptions): Promise<Courier.Tenant>;
    /**
     * @param {Courier.ListTenantParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.tenants.list({
     *         parent_tenant_id: "string",
     *         limit: 1,
     *         cursor: "string"
     *     })
     */
    list(request?: Courier.ListTenantParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.TenantListResponse>;
    /**
     * @param {string} tenantId - Id of the tenant to be deleted.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.tenants.delete("string")
     */
    delete(tenantId: string, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * @param {string} tenantId - Id of the tenant for user membership.
     * @param {Courier.ListUsersForTenantParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.tenants.getUsersByTenant("string", {
     *         limit: 1,
     *         cursor: "string"
     *     })
     */
    getUsersByTenant(tenantId: string, request?: Courier.ListUsersForTenantParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.ListUsersForTenantResponse>;
    /**
     * @param {string} tenantId - Id of the tenant to update the default preferences for.
     * @param {string} topicId - Id fo the susbcription topic you want to have a default preference for.
     * @param {Courier.SubscriptionTopicNew} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.tenants.createOrReplaceDefaultPreferencesForTopic("tenantABC", "HB529N49MD4D5PMX9WR5P4JH78NA", {
     *         status: Courier.SubscriptionTopicStatus.OptedIn,
     *         has_custom_routing: true,
     *         custom_routing: [Courier.ChannelClassification.Inbox]
     *     })
     */
    createOrReplaceDefaultPreferencesForTopic(tenantId: string, topicId: string, request: Courier.SubscriptionTopicNew, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * @param {string} tenantId - Id of the tenant to update the default preferences for.
     * @param {string} topicId - Id fo the susbcription topic you want to have a default preference for.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.tenants.removeDefaultPreferencesForTopic("string", "string")
     */
    removeDefaultPreferencesForTopic(tenantId: string, topicId: string, requestOptions?: Tenants.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
