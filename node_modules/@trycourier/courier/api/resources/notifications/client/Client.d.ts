/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Notifications {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Notifications {
    protected readonly _options: Notifications.Options;
    constructor(_options?: Notifications.Options);
    /**
     * @param {Courier.NotificationListParams} request
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.list({
     *         cursor: "string"
     *     })
     */
    list(request?: Courier.NotificationListParams, requestOptions?: Notifications.RequestOptions): Promise<Courier.NotificationListResponse>;
    /**
     * @param {string} id
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.getContent("string")
     */
    getContent(id: string, requestOptions?: Notifications.RequestOptions): Promise<Courier.NotificationGetContentResponse>;
    /**
     * @param {string} id
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.getDraftContent("string")
     */
    getDraftContent(id: string, requestOptions?: Notifications.RequestOptions): Promise<Courier.NotificationGetContentResponse>;
    /**
     * @param {string} id
     * @param {Courier.NotificationUpdateVariationsParams} request
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.updateVariations("string", {
     *         blocks: [{
     *                 alias: "string",
     *                 context: "string",
     *                 id: "string",
     *                 type: Courier.BlockType.Action,
     *                 content: "string",
     *                 locales: {
     *                     "string": "string"
     *                 },
     *                 checksum: "string"
     *             }],
     *         channels: [{
     *                 id: "string",
     *                 type: "string",
     *                 content: {},
     *                 locales: {
     *                     "string": {}
     *                 },
     *                 checksum: "string"
     *             }]
     *     })
     */
    updateVariations(id: string, request?: Courier.NotificationUpdateVariationsParams, requestOptions?: Notifications.RequestOptions): Promise<void>;
    /**
     * @param {string} id
     * @param {Courier.NotificationDraftUpdateVariationsParams} request
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.updateDraftVariations("string", {
     *         blocks: [{
     *                 alias: "string",
     *                 context: "string",
     *                 id: "string",
     *                 type: Courier.BlockType.Action,
     *                 content: "string",
     *                 locales: {
     *                     "string": "string"
     *                 },
     *                 checksum: "string"
     *             }],
     *         channels: [{
     *                 id: "string",
     *                 type: "string",
     *                 content: {},
     *                 locales: {
     *                     "string": {}
     *                 },
     *                 checksum: "string"
     *             }]
     *     })
     */
    updateDraftVariations(id: string, request?: Courier.NotificationDraftUpdateVariationsParams, requestOptions?: Notifications.RequestOptions): Promise<void>;
    /**
     * @param {string} id
     * @param {string} submissionId
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.getSubmissionChecks("string", "string")
     */
    getSubmissionChecks(id: string, submissionId: string, requestOptions?: Notifications.RequestOptions): Promise<Courier.SubmissionChecksGetResponse>;
    /**
     * @param {string} id
     * @param {string} submissionId
     * @param {Courier.SubmissionChecksReplaceParams} request
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.replaceSubmissionChecks("string", "string", {
     *         checks: [{
     *                 id: "string",
     *                 status: Courier.CheckStatus.Resolved,
     *                 type: "custom"
     *             }]
     *     })
     */
    replaceSubmissionChecks(id: string, submissionId: string, request: Courier.SubmissionChecksReplaceParams, requestOptions?: Notifications.RequestOptions): Promise<Courier.SubmissionChecksReplaceResponse>;
    /**
     * @param {string} id
     * @param {string} submissionId
     * @param {Notifications.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.notifications.cancelSubmission("string", "string")
     */
    cancelSubmission(id: string, submissionId: string, requestOptions?: Notifications.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
