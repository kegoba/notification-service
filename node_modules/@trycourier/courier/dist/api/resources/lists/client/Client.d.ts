/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Lists {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Lists {
    protected readonly _options: Lists.Options;
    constructor(_options?: Lists.Options);
    /**
     * Returns all of the lists, with the ability to filter based on a pattern.
     *
     * @param {Courier.GetAllListsRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.lists.list({
     *         cursor: "string",
     *         pattern: "string"
     *     })
     */
    list(request?: Courier.GetAllListsRequest, requestOptions?: Lists.RequestOptions): Promise<Courier.ListGetAllResponse>;
    /**
     * Returns a list based on the list ID provided.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await courier.lists.get("string")
     */
    get(listId: string, requestOptions?: Lists.RequestOptions): Promise<Courier.List>;
    /**
     * Create or replace an existing list with the supplied values.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.ListPutParams} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.lists.update("string", {
     *         name: "string",
     *         preferences: {
     *             categories: {
     *                 "string": {
     *                     status: Courier.PreferenceStatus.OptedIn,
     *                     rules: [{
     *                             start: "string",
     *                             until: "string"
     *                         }],
     *                     channel_preferences: [{
     *                             channel: Courier.ChannelClassification.DirectMessage
     *                         }]
     *                 }
     *             },
     *             notifications: {
     *                 "string": {
     *                     status: Courier.PreferenceStatus.OptedIn,
     *                     rules: [{
     *                             start: "string",
     *                             until: "string"
     *                         }],
     *                     channel_preferences: [{
     *                             channel: Courier.ChannelClassification.DirectMessage
     *                         }]
     *                 }
     *             }
     *         }
     *     })
     */
    update(listId: string, request: Courier.ListPutParams, requestOptions?: Lists.RequestOptions): Promise<Courier.List>;
    /**
     * Delete a list by list ID.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.lists.delete("string")
     */
    delete(listId: string, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Restore a previously deleted list.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.lists.restore("string")
     */
    restore(listId: string, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Get the list's subscriptions.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.GetSubscriptionForListRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await courier.lists.getSubscribers("string", {
     *         cursor: "string"
     *     })
     */
    getSubscribers(listId: string, request?: Courier.GetSubscriptionForListRequest, requestOptions?: Lists.RequestOptions): Promise<Courier.ListGetSubscriptionsResponse>;
    /**
     * Subscribes the users to the list, overwriting existing subscriptions. If the list does not exist, it will be automatically created.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.SubscribeUsersToListRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.lists.updateSubscribers("string", {
     *         recipients: [{
     *                 recipientId: "string",
     *                 preferences: {
     *                     categories: {
     *                         "string": {
     *                             status: Courier.PreferenceStatus.OptedIn,
     *                             rules: [{
     *                                     start: "string",
     *                                     until: "string"
     *                                 }],
     *                             channel_preferences: [{
     *                                     channel: Courier.ChannelClassification.DirectMessage
     *                                 }]
     *                         }
     *                     },
     *                     notifications: {
     *                         "string": {
     *                             status: Courier.PreferenceStatus.OptedIn,
     *                             rules: [{
     *                                     start: "string",
     *                                     until: "string"
     *                                 }],
     *                             channel_preferences: [{
     *                                     channel: Courier.ChannelClassification.DirectMessage
     *                                 }]
     *                         }
     *                     }
     *                 }
     *             }]
     *     })
     */
    updateSubscribers(listId: string, request: Courier.SubscribeUsersToListRequest, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Subscribes additional users to the list, without modifying existing subscriptions. If the list does not exist, it will be automatically created.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {Courier.AddSubscribersToList} request
     * @param {Lists.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.lists.addSubscribers("string", {
     *         recipients: [{
     *                 recipientId: "string",
     *                 preferences: {
     *                     categories: {
     *                         "string": {
     *                             status: Courier.PreferenceStatus.OptedIn,
     *                             rules: [{
     *                                     start: "string",
     *                                     until: "string"
     *                                 }],
     *                             channel_preferences: [{
     *                                     channel: Courier.ChannelClassification.DirectMessage
     *                                 }]
     *                         }
     *                     },
     *                     notifications: {
     *                         "string": {
     *                             status: Courier.PreferenceStatus.OptedIn,
     *                             rules: [{
     *                                     start: "string",
     *                                     until: "string"
     *                                 }],
     *                             channel_preferences: [{
     *                                     channel: Courier.ChannelClassification.DirectMessage
     *                                 }]
     *                         }
     *                     }
     *                 }
     *             }]
     *     })
     */
    addSubscribers(listId: string, request: Courier.AddSubscribersToList, requestOptions?: Lists.IdempotentRequestOptions): Promise<void>;
    /**
     * Subscribe a user to an existing list (note: if the List does not exist, it will be automatically created).
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {string} userId - A unique identifier representing the recipient associated with the list
     * @param {Courier.SubscribeUserToListRequest} request
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.lists.subscribe("string", "string", {
     *         preferences: {
     *             categories: {
     *                 "string": {
     *                     status: Courier.PreferenceStatus.OptedIn,
     *                     rules: [{
     *                             start: "string",
     *                             until: "string"
     *                         }],
     *                     channel_preferences: [{
     *                             channel: Courier.ChannelClassification.DirectMessage
     *                         }]
     *                 }
     *             },
     *             notifications: {
     *                 "string": {
     *                     status: Courier.PreferenceStatus.OptedIn,
     *                     rules: [{
     *                             start: "string",
     *                             until: "string"
     *                         }],
     *                     channel_preferences: [{
     *                             channel: Courier.ChannelClassification.DirectMessage
     *                         }]
     *                 }
     *             }
     *         }
     *     })
     */
    subscribe(listId: string, userId: string, request?: Courier.SubscribeUserToListRequest, requestOptions?: Lists.RequestOptions): Promise<void>;
    /**
     * Delete a subscription to a list by list ID and user ID.
     *
     * @param {string} listId - A unique identifier representing the list you wish to retrieve.
     * @param {string} userId - A unique identifier representing the recipient associated with the list
     * @param {Lists.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await courier.lists.unsubscribe("string", "string")
     */
    unsubscribe(listId: string, userId: string, requestOptions?: Lists.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
