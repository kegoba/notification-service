/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Automations {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Automations {
    protected readonly _options: Automations.Options;
    constructor(_options?: Automations.Options);
    /**
     * Invoke an automation run from an automation template.
     *
     * @param {string} templateId - A unique identifier representing the automation template to be invoked. This could be the Automation Template ID or the Automation Template Alias.
     * @param {Courier.AutomationInvokeParams} request
     * @param {Automations.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.automations.invokeAutomationTemplate("string", {
     *         brand: "string",
     *         data: {
     *             "string": {
     *                 "key": "value"
     *             }
     *         },
     *         profile: {
     *             "key": "value"
     *         },
     *         recipient: "string",
     *         template: "string"
     *     })
     */
    invokeAutomationTemplate(templateId: string, request: Courier.AutomationInvokeParams, requestOptions?: Automations.IdempotentRequestOptions): Promise<Courier.AutomationInvokeResponse>;
    /**
     * Invoke an ad hoc automation run. This endpoint accepts a JSON payload with a series of automation steps. For information about what steps are available, checkout the ad hoc automation guide [here](https://www.courier.com/docs/automations/steps/).
     *
     * @param {Courier.AutomationAdHocInvokeParams} request
     * @param {Automations.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.automations.invokeAdHocAutomation({
     *         data: {
     *             "name": "Foo"
     *         },
     *         profile: {
     *             "tenant_id": "abc-123"
     *         },
     *         recipient: "user-yes",
     *         automation: {
     *             cancelation_token: "delay-send--user-yes--abc-123",
     *             steps: [{
     *                     action: "delay",
     *                     until: "20240408T080910.123"
     *                 }, {
     *                     action: "send",
     *                     template: "64TP5HKPFTM8VTK1Y75SJDQX9JK0"
     *                 }]
     *         }
     *     })
     */
    invokeAdHocAutomation(request: Courier.AutomationAdHocInvokeParams, requestOptions?: Automations.IdempotentRequestOptions): Promise<Courier.AutomationInvokeResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
