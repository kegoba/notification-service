/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Courier from "../../../../../index";
export declare namespace Preferences {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Preferences {
    protected readonly _options: Preferences.Options;
    constructor(_options?: Preferences.Options);
    /**
     * Fetch all user preferences.
     *
     * @param {string} userId - A unique identifier associated with the user whose preferences you wish to retrieve.
     * @param {Preferences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.preferences.list("string")
     */
    list(userId: string, requestOptions?: Preferences.RequestOptions): Promise<Courier.users.UserPreferencesListResponse>;
    /**
     * Fetch user preferences for a specific subscription topic.
     *
     * @param {string} userId - A unique identifier associated with the user whose preferences you wish to retrieve.
     * @param {string} topicId - A unique identifier associated with a subscription topic.
     * @param {Preferences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.NotFoundError}
     *
     * @example
     *     await courier.users.preferences.get("string", "string")
     */
    get(userId: string, topicId: string, requestOptions?: Preferences.RequestOptions): Promise<Courier.users.UserPreferencesGetResponse>;
    /**
     * Update or Create user preferences for a specific subscription topic.
     *
     * @param {string} userId - A unique identifier associated with the user whose preferences you wish to retrieve.
     * @param {string} topicId - A unique identifier associated with a subscription topic.
     * @param {Courier.users.UserPreferencesUpdateParams} request
     * @param {Preferences.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.preferences.update("abc-123", "74Q4QGFBEX481DP6JRPMV751H4XT", {
     *         topic: {
     *             status: Courier.PreferenceStatus.OptedIn,
     *             has_custom_routing: true,
     *             custom_routing: [Courier.ChannelClassification.Inbox, Courier.ChannelClassification.Email]
     *         }
     *     })
     */
    update(userId: string, topicId: string, request: Courier.users.UserPreferencesUpdateParams, requestOptions?: Preferences.RequestOptions): Promise<Courier.users.UserPreferencesUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
