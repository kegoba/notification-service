/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Courier from "../../../../../index";
export declare namespace Tenants {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Tenants {
    protected readonly _options: Tenants.Options;
    constructor(_options?: Tenants.Options);
    /**
     * This endpoint is used to add a user to
     * multiple tenants in one call.
     * A custom profile can also be supplied for each tenant.
     * This profile will be merged with the user's main
     * profile when sending to the user with that tenant.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {Courier.users.AddUserToMultipleTenantsParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.users.tenants.addMultple("string", {
     *         tenants: [{
     *                 user_id: "string",
     *                 type: "user",
     *                 tenant_id: "string",
     *                 profile: {
     *                     "string": {
     *                         "key": "value"
     *                     }
     *                 }
     *             }]
     *     })
     */
    addMultple(userId: string, request: Courier.users.AddUserToMultipleTenantsParams, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * This endpoint is used to add a single tenant.
     *
     * A custom profile can also be supplied with the tenant.
     * This profile will be merged with the user's main profile
     * when sending to the user with that tenant.
     *
     * @param {string} userId - Id of the user to be added to the supplied tenant.
     * @param {string} tenantId - Id of the tenant the user should be added to.
     * @param {Courier.users.AddUserToSingleTenantsParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.users.tenants.add("string", "string", {
     *         profile: {
     *             "string": {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    add(userId: string, tenantId: string, request?: Courier.users.AddUserToSingleTenantsParams, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * Removes a user from any tenants they may have been associated with.
     *
     * @param {string} userId - Id of the user to be removed from the supplied tenant.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.users.tenants.removeAll("string")
     */
    removeAll(userId: string, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * Removes a user from the supplied tenant.
     *
     * @param {string} userId - Id of the user to be removed from the supplied tenant.
     * @param {string} tenantId - Id of the tenant the user should be removed from.
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.users.tenants.remove("string", "string")
     */
    remove(userId: string, tenantId: string, requestOptions?: Tenants.RequestOptions): Promise<void>;
    /**
     * Returns a paginated list of user tenant associations.
     *
     * @param {string} userId - Id of the user to retrieve all associated tenants for.
     * @param {Courier.users.ListTenantsForUserParams} request
     * @param {Tenants.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.users.tenants.list("string", {
     *         limit: 1,
     *         cursor: "string"
     *     })
     */
    list(userId: string, request?: Courier.users.ListTenantsForUserParams, requestOptions?: Tenants.RequestOptions): Promise<Courier.users.ListTenantsForUserResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
