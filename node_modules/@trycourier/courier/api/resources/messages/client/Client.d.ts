/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Courier from "../../../index";
export declare namespace Messages {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: string | undefined;
    }
}
export declare class Messages {
    protected readonly _options: Messages.Options;
    constructor(_options?: Messages.Options);
    /**
     * Fetch the statuses of messages you've previously sent.
     *
     * @param {Courier.ListMessagesRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.messages.list({
     *         archived: true,
     *         cursor: "string",
     *         event: "string",
     *         list: "string",
     *         messageId: "string",
     *         notification: "string",
     *         provider: "string",
     *         recipient: "string",
     *         status: "string",
     *         tag: "string",
     *         tags: "string",
     *         tenant_id: "string",
     *         enqueued_after: "string",
     *         traceId: "string"
     *     })
     */
    list(request?: Courier.ListMessagesRequest, requestOptions?: Messages.RequestOptions): Promise<Courier.ListMessagesResponse>;
    /**
     * Fetch the status of a message you've previously sent.
     *
     * @param {string} messageId - A unique identifier associated with the message you wish to retrieve (results from a send).
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     *
     * @example
     *     await courier.messages.get("string")
     */
    get(messageId: string, requestOptions?: Messages.RequestOptions): Promise<Courier.MessageDetails>;
    /**
     * Cancel a message that is currently in the process of being delivered. A well-formatted API call to the cancel message API will return either `200` status code for a successful cancellation or `409` status code for an unsuccessful cancellation. Both cases will include the actual message record in the response body (see details below).
     *
     * @param {string} messageId - A unique identifier representing the message ID
     * @param {Messages.IdempotentRequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.messages.cancel("string")
     */
    cancel(messageId: string, requestOptions?: Messages.IdempotentRequestOptions): Promise<Courier.MessageDetails>;
    /**
     * Fetch the array of events of a message you've previously sent.
     *
     * @param {string} messageId - A unique identifier representing the message ID
     * @param {Courier.GetMessageHistoryRequest} request
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     *
     * @example
     *     await courier.messages.getHistory("string", {
     *         type: "string"
     *     })
     */
    getHistory(messageId: string, request?: Courier.GetMessageHistoryRequest, requestOptions?: Messages.RequestOptions): Promise<Courier.MessageHistoryResponse>;
    /**
     * @param {string} messageId - A unique identifier associated with the message you wish to retrieve (results from a send).
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     * @throws {@link Courier.MessageNotFoundError}
     *
     * @example
     *     await courier.messages.getContent("string")
     */
    getContent(messageId: string, requestOptions?: Messages.RequestOptions): Promise<Courier.RenderOutputResponse>;
    /**
     * @param {string} requestId - A unique identifier representing the request ID
     * @param {Messages.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await courier.messages.archive("string")
     */
    archive(requestId: string, requestOptions?: Messages.RequestOptions): Promise<void>;
    protected _getAuthorizationHeader(): Promise<string>;
}
