/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Courier from "../../../../../index";
export declare namespace Tokens {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Tokens {
    protected readonly _options: Tokens.Options;
    constructor(_options?: Tokens.Options);
    /**
     * Adds multiple tokens to a user and overwrites matching existing tokens.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.tokens.addMultiple("string")
     */
    addMultiple(userId: string, requestOptions?: Tokens.RequestOptions): Promise<void>;
    /**
     * Adds a single token to a user and overwrites a matching existing token.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Courier.users.UserToken} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.tokens.add("string", "string", {
     *         token: "string",
     *         provider_key: Courier.users.ProviderKey.FirebaseFcm,
     *         expiry_date: "string",
     *         properties: {
     *             "key": "value"
     *         },
     *         device: {
     *             app_id: "string",
     *             ad_id: "string",
     *             device_id: "string",
     *             platform: "string",
     *             manufacturer: "string",
     *             model: "string"
     *         },
     *         tracking: {
     *             os_version: "string",
     *             ip: "string",
     *             lat: "string",
     *             long: "string"
     *         }
     *     })
     */
    add(userId: string, token: string, request: Courier.users.UserToken, requestOptions?: Tokens.RequestOptions): Promise<void>;
    /**
     * Apply a JSON Patch (RFC 6902) to the specified token.
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Courier.users.PatchUserTokenOpts} request
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.tokens.update("string", "string", {
     *         patch: [{}]
     *     })
     */
    update(userId: string, token: string, request: Courier.users.PatchUserTokenOpts, requestOptions?: Tokens.RequestOptions): Promise<void>;
    /**
     * Get single token available for a `:token`
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {string} token - The full token string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.tokens.get("string", "string")
     */
    get(userId: string, token: string, requestOptions?: Tokens.RequestOptions): Promise<Courier.users.GetUserTokenResponse>;
    /**
     * Gets all tokens available for a :user_id
     *
     * @param {string} userId - The user's ID. This can be any uniquely identifiable string.
     * @param {Tokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Courier.BadRequestError}
     *
     * @example
     *     await courier.users.tokens.list("string")
     */
    list(userId: string, requestOptions?: Tokens.RequestOptions): Promise<Courier.users.GetAllTokensResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
